<?php

namespace app\tests\repositories;

use PHPUnit\Framework\TestCase;
use app\services\OneProductSearchService;
use app\tests\DbManager;
use app\tests\sources\fixtures\ProductsFixture;
use app\repositories\{DbRepository,
    RepositoryInterface};
use app\models\{AbstractBaseCollection,
    CollectionInterface,
    CriteriaInterface};

class OneProductSearchServiceTests extends TestCase
{
    private static $dbClass;
    
    public static function setUpBeforeClass()
    {
        self::$dbClass = new DbManager([
            'fixtures'=>[
                'products'=>ProductsFixture::class,
            ],
        ]);
        self::$dbClass->loadFixtures();
    }
    
    /**
     * Тестирует метод OneProductSearchService::setRepository
     * передаю не поддерживающий RepositoryInterface объект
     * @expectedException TypeError
     */
    public function testSetRepositoryError()
    {
        $service = new OneProductSearchService();
        $service->repository = new class () {};
    }
    
    /**
     * Тестирует метод OneProductSearchService::search
     */
    public function testSearch()
    {
        $repository = new OneProductSearchService();
        $result = $repository->getCriteria();
        
        $this->assertTrue($result instanceof CriteriaInterface);
    }
    
    /**
     * Тестирует метод OneProductSearchService::getGroup
     * вызываю с пустым OneProductSearchService::items
     * @expectedException yii\base\ErrorException
     */
    /*public function testGetGroupError()
    {
        $repository = new OneProductSearchService();
        $repository->getGroup();
    }*/
    
    /**
     * Тестирует метод OneProductSearchService::getGroup
     */
    /*public function testGetGroup()
    {
        $repository = new OneProductSearchService();
        $repository->class = $this->mockModel ::className();
        $repository->items = $this->mockCollection;
        
        $result = $repository->getGroup();
        
        $this->assertTrue($result instanceof CollectionInterface);
        
        $count = 0;
        foreach ($result as $object) {
            $this->assertTrue($object instanceof $this->mockModel);
            ++$count;
        }
        $this->assertEquals(3, $count);
    }*/
    
    /**
     * Тестирует метод OneProductSearchService::getGroup
     * с применением критериев выборки
     */
    /*public function testGetGroupCriteria()
    {
        $repository = new OneProductSearchService();
        $repository->class = $this->mockModel::className();
        $repository->items = $this->mockCollection;
        $criteria = $repository->getCriteria();
        $criteria->where(['!=', '[[name]]', 'three']);
        $result = $repository->getGroup();
        
        $this->assertTrue($result instanceof CollectionInterface);
        
        $count = 0;
        foreach ($result as $object) {
            $this->assertTrue($object instanceof $this->mockModel);
            ++$count;
        }
        $this->assertEquals(2, $count);
    }*/
    
    /**
     * Тестирует метод OneProductSearchService::getGroup
     * при отсутствии данных, удовлетворяющих условиям SQL запроса
     */
    /*public function testGetGroupCriteriaNull()
    {
        $repository = new OneProductSearchService();
        $repository->class = $this->mockModel::className();
        $repository->items = $this->mockCollection;
        $criteria = $repository->getCriteria();
        $criteria->where(['in', '[[id]]', [234, 500]]);
        $result = $repository->getGroup();
        
        $this->assertNull($result);
    }*/
    
    /**
     * Тестирует метод OneProductSearchService::getOne
     */
    /*public function testGetOne()
    {
        $repository = new OneProductSearchService();
        $repository->class = $this->mockModel::className();
        $result = $repository->getOne();
        
        $this->assertTrue($result instanceof $this->mockModel);
    }*/
    
    /**
     * Тестирует метод OneProductSearchService::getOne
     * с применением критериев выборки
     */
    /*public function testGetOneCriteria()
    {
        $repository = new OneProductSearchService();
        $repository->class = $this->mockModel::className();
        $criteria = $repository->getCriteria();
        $criteria->where(['[[name]]'=>'three']);
        $result = $repository->getOne();
        
        $this->assertTrue($result instanceof $this->mockModel);
    }*/
    
    /**
     * Тестирует метод OneProductSearchService::getOne
     * при отсутствии данных, удовлетворяющих условиям SQL запроса
     */
    /*public function testgetOneCriteriaNull()
    {
        $repository = new OneProductSearchService();
        $repository->class = $this->mockModel::className();
        $criteria = $repository->getCriteria();
        $criteria->where(['[[name]]'=>'hundred']);
        $result = $repository->getOne();
        
        $this->assertNull($result);
    }*/
    
    public static function tearDownAfterClass()
    {
        self::$dbClass->unloadFixtures();
    }
}
